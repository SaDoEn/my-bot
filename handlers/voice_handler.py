import os
import tempfile
from telegram import Update
from telegram.ext import ContextTypes

from services.transcription_service import TranscriptionService
from utils.logger import setup_logger

logger = setup_logger()


class VoiceHandler:
    def __init__(self):
        self.transcription_service = TranscriptionService()

    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–ª—è—î –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∞—É–¥—ñ–æ —Ñ–∞–π–ª–∏"""
        try:
            user = update.effective_user
            chat = update.effective_chat

            logger.info(f"üì¢ –û—Ç—Ä–∏–º–∞–Ω–æ –≥–æ–ª–æ—Å–æ—á–æ–∫ {user.first_name} –≤ —á–∞—Ç—ñ {chat.title or chat.id}")

            status_message = await update.message.reply_text(
                "üé§ –û–±—Ä–æ–±–ª—è—é –≥–æ–ª–æ—Å–æ—á–æ–∫...",
                reply_to_message_id=update.message.message_id
            )

            if update.message.voice:
                file_obj = update.message.voice
                file_extension = ".ogg"
                logger.info("üéµ –û–±—Ä–æ–±–ª—è—é voice –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
            elif update.message.audio:
                file_obj = update.message.audio
                file_extension = ".mp3"
                logger.info("üéµ –û–±—Ä–æ–±–ª—è—é audio —Ñ–∞–π–ª")
            else:
                await status_message.edit_text("‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É")
                return

            file = await context.bot.get_file(file_obj.file_id)

            with tempfile.NamedTemporaryFile(suffix=file_extension, delete=False) as temp_file:
                temp_file_path = temp_file.name

            try:
                await file.download_to_drive(temp_file_path)
                logger.info(f"üì• –§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {temp_file_path}")

                if not os.path.exists(temp_file_path):
                    raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î: {temp_file_path}")

                file_size = os.path.getsize(temp_file_path)
                if file_size == 0:
                    raise ValueError("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —Ñ–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π")

                logger.info(f"üìä –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {file_size} –±–∞–π—Ç")

                await status_message.edit_text("üîÑ –†–æ–∑–ø—ñ–∑–Ω–∞—é –º–æ–≤–ª–µ–Ω–Ω—è...")

                transcription = await self.transcription_service.transcribe_audio(temp_file_path)

                if transcription and transcription.strip():
                    response_text = f"üìù **–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:**\n\n{transcription}"

                    await status_message.edit_text(
                        response_text,
                        parse_mode='Markdown'
                    )

                    logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {user.first_name}")
                else:
                    await status_message.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç–∏ —á—ñ—Ç–∫—ñ—à–µ.")
                    logger.warning("‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è")

            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ: {e}")
                await status_message.edit_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
                )
            finally:
                if os.path.exists(temp_file_path):
                    os.unlink(temp_file_path)
                    logger.info(f"üóëÔ∏è –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ: {temp_file_path}")

        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            if 'status_message' in locals():
                await status_message.edit_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            else:
                await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")