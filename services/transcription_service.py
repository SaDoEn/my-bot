import whisper
import asyncio
import os
from concurrent.futures import ThreadPoolExecutor
from pydub import AudioSegment
from utils.logger import setup_logger
from config.settings import settings

logger = setup_logger()


class TranscriptionService:
    def __init__(self):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
        """
        self.model = None
        self.executor = ThreadPoolExecutor(max_workers=2)

    def _load_model(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ Whisper (–≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑)"""
        if self.model is None:
            logger.info(f"ü§ñ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –º–æ–¥–µ–ª—å Whisper: {settings.WHISPER_MODEL}")
            self.model = whisper.load_model(settings.WHISPER_MODEL)
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å Whisper –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
        return self.model

    def _preprocess_audio(self, audio_path: str) -> str:
        """
        –ü–æ–ø–µ—Ä–µ–¥–Ω—è –æ–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        """
        try:
            logger.info("üîß –ü–æ—á–∞—Ç–æ–∫ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ")

            audio = AudioSegment.from_file(audio_path)

            normalized_audio = audio.normalize()

            if normalized_audio.channels > 1:
                normalized_audio = normalized_audio.set_channels(1)

            target_sample_rate = 16000
            if normalized_audio.frame_rate != target_sample_rate:
                normalized_audio = normalized_audio.set_frame_rate(target_sample_rate)

            normalized_audio = normalized_audio.high_pass_filter(80)

            normalized_audio = normalized_audio.compress_dynamic_range(threshold=-20.0, ratio=4.0)

            processed_path = audio_path.replace('.', '_processed.')
            normalized_audio.export(processed_path, format="wav", parameters=["-ar", "16000", "-ac", "1"])

            logger.info(f"‚úÖ –ê—É–¥—ñ–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {processed_path}")
            return processed_path

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ: {e}")
            return audio_path

    def _transcribe_sync(self, audio_path: str) -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏"""
        try:
            if not os.path.exists(audio_path):
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {audio_path}")
                return ""

            file_size = os.path.getsize(audio_path)
            logger.info(f"üìä –†–æ–∑–ø–æ—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é —Ñ–∞–π–ª—É —Ä–æ–∑–º—ñ—Ä–æ–º {file_size} –±–∞–π—Ç")

            processed_audio_path = self._preprocess_audio(audio_path)

            model = self._load_model()

            transcribe_options = {
                "language": "uk",
                "task": "transcribe",
                "fp16": False,
                "verbose": False,
                "word_timestamps": False,

                "temperature": 0.0,
                "compression_ratio_threshold": 2.0,
                "logprob_threshold": -0.5,
                "no_speech_threshold": 0.4,
                "condition_on_previous_text": True,

                "initial_prompt": """–¶–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Ä–æ–∑–º–æ–≤–Ω–∞ –º–æ–≤–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—É —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –≥—Ä–∞–º–∞—Ç–∏–∫—É —Ç–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—é. 
                –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å–ª–æ–≤–∞ —Ç–æ—á–Ω–æ, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ –≤–∏–º–æ–≤–∏. 
                –ù–µ –ø–ª—É—Ç–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å–ª–æ–≤–∞ –∑ —Ä–æ—Å—ñ–π—Å—å–∫–∏–º–∏. –î–æ—Ç—Ä–∏–º—É–π—Å—è –Ω–æ—Ä–º —Å—É—á–∞—Å–Ω–æ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏.""",
            }

            result = model.transcribe(processed_audio_path, **transcribe_options)
            transcription = result["text"].strip()

            logger.info(f"üìù –ü–µ—Ä–≤–∏–Ω–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è: '{transcription}'")

            if processed_audio_path != audio_path and os.path.exists(processed_audio_path):
                os.unlink(processed_audio_path)

            cleaned_transcription = self._basic_text_cleanup(transcription)

            logger.info(f"‚ú® –û—á–∏—â–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è: '{cleaned_transcription}'")
            return cleaned_transcription

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó: {e}")
            import traceback
            logger.error(f"üí• –î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {traceback.format_exc()}")
            return ""

    def _basic_text_cleanup(self, text: str) -> str:
        """
        –ë–∞–∑–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –±–µ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
        """
        if not text:
            return text

        import re

        text = re.sub(r'\s+', ' ', text)

        text = re.sub(r'\s+([,.!?;:])', r'\1', text)
        text = re.sub(r'([.!?])\s*([–∞-—è—ñ—î—ó“ë–ê-–Ø–Ü–Ñ–á“ê])', r'\1 \2', text)

        text = text.strip()

        if text:
            text = text[0].upper() + text[1:]

        return text

    async def transcribe_audio(self, audio_path: str) -> str:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É

        Args:
            audio_path (str): –®–ª—è—Ö –¥–æ –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É

        Returns:
            str: –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
        """
        try:
            logger.info(f"üé§ –ü–æ—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é —Ñ–∞–π–ª—É: {audio_path}")

            loop = asyncio.get_event_loop()
            transcription = await loop.run_in_executor(
                self.executor,
                self._transcribe_sync,
                audio_path
            )

            if transcription:
                logger.info("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–∞")
            else:
                logger.warning("‚ö†Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω—É–ª–∞ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

            return transcription

        except Exception as e:
            logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó: {e}")
            return ""

    def __del__(self):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è executor –ø—Ä–∏ –∑–Ω–∏—â–µ–Ω–Ω—ñ –æ–±'—î–∫—Ç–∞"""
        if hasattr(self, 'executor'):
            self.executor.shutdown(wait=False)